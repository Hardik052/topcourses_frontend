{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhard\\\\Desktop\\\\FrontEnd\\\\top-course-starter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Filter from \"./components/Filter\";\nimport Navbar from \"./components/Navbar\";\nimport Spinner from \"./components/Spinner\";\nimport { filterData, apiUrl } from \"./data\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [courses, setCourses] = useState(null);\n  const [loading, setLoading] = useState(true);\n  async function fetchData() {\n    setLoading(true);\n    try {\n      let response = await fetch(apiUrl);\n      let output = await response.json(); // Corrected by adding 'await' here\n\n      setCourses(output.data); // Set courses with the output data\n    } catch (e) {\n      toast.error(\"Network Error\");\n    }\n    setLoading(false);\n  }\n  useEffect(() => {\n    fetchData();\n  }, []); // Empty dependency array to call fetchData only once on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        filterData: filterData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-11/12 max-w-[1200px] mx-auto flex flex-col justify-center items-center min-h-[50vh]\",\n        children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Cards, {\n          courses: courses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this) // Pass the courses data to Cards component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"Fbw054i2cVvswAI/AjuCAd23pdM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Cards","Filter","Navbar","Spinner","filterData","apiUrl","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","courses","setCourses","loading","setLoading","fetchData","response","fetch","output","json","data","e","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bhard/Desktop/FrontEnd/top-course-starter/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Filter from \"./components/Filter\";\nimport Navbar from \"./components/Navbar\";\nimport Spinner from \"./components/Spinner\";\nimport { filterData, apiUrl } from \"./data\";\nimport { toast } from \"react-toastify\";\n\nconst App = () => {\n  const [courses, setCourses] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    setLoading(true);\n    try {\n      let response = await fetch(apiUrl);\n      let output = await response.json(); // Corrected by adding 'await' here\n\n      setCourses(output.data); // Set courses with the output data\n\n    } catch (e) {\n      toast.error(\"Network Error\");\n    }\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []); // Empty dependency array to call fetchData only once on mount\n\n  return (\n    <>\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <Filter filterData={filterData} />\n        <div className=\"w-11/12 max-w-[1200px] mx-auto flex flex-col justify-center items-center min-h-[50vh]\">\n          {loading ? (\n            <Spinner />\n          ) : (\n            <Cards courses={courses} /> // Pass the courses data to Cards component\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,UAAU,EAAEC,MAAM,QAAQ,QAAQ;AAC3C,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5C,eAAekB,SAASA,CAAA,EAAG;IACzBD,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,IAAIE,QAAQ,GAAG,MAAMC,KAAK,CAACd,MAAM,CAAC;MAClC,IAAIe,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,CAAC,CAAC;;MAEpCP,UAAU,CAACM,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IAE3B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVjB,KAAK,CAACkB,KAAK,CAAC,eAAe,CAAC;IAC9B;IACAR,UAAU,CAAC,KAAK,CAAC;EACnB;EAEAlB,SAAS,CAAC,MAAM;IACdmB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACEjB,OAAA;MAAKkB,SAAS,EAAC,4BAA4B;MAAAD,QAAA,gBACzCjB,OAAA,CAACN,MAAM;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACVtB,OAAA,CAACP,MAAM;QAACG,UAAU,EAAEA;MAAW;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAClCtB,OAAA;QAAKkB,SAAS,EAAC,uFAAuF;QAAAD,QAAA,EACnGV,OAAO,gBACNP,OAAA,CAACL,OAAO;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,gBAEXtB,OAAA,CAACR,KAAK;UAACa,OAAO,EAAEA;QAAQ;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,CAAC;MAC7B;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF,iBACL;AAEP,CAAC;AAAClB,EAAA,CArCID,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}